<!--
Syntax:
r <count> [ ... ]       - repeat <count> times
lt <angle>              - turn left <angle> amount (12 = full turn)
rt <angle>              - turn right <angle> amount
go <amount>             - go straight by <amount> (100 = one length)
back <amount>           - go backwards by <amount>
col <color>             - switch color. aqua, black, blue, brown, coral, cyan, gold, gray, green, lavender, lime, magenta, navy, olive, orange, pink, purple, red, teal, white, yellow, ?, #hhh
pen <down|up>           - put pen down or up
c                       - clear the canvas

-->
<html>
<head>
	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body style="margin-top:40px;">
<div id="turtleBox" style="position:relative;width:500px;height:500px;overflow:hidden;border:1px solid #000000;margin-left:auto;margin-right:auto;">
	<img id="t" style="position:absolute;width:50px;height:50px;left:-100px;transform-origin:center;" src="/images/logo/turtle.png">
	<img id="t2" style="position:absolute;width:50px;height:50px;left:-100px;transform-origin:center;" src="/images/logo/turtle.png">
	<img id="t3" style="position:absolute;width:50px;height:50px;left:-100px;transform-origin:center;" src="/images/logo/turtle.png">
	<img id="t4" style="position:absolute;width:50px;height:50px;left:-100px;transform-origin:center;" src="/images/logo/turtle.png">
	<canvas id="c" height="500" width="500"></canvas>
</div>
<br>
<textarea id="commandBox" style="width:800px;height:50px;margin-left:auto;margin-right:auto;display:block;font-size:20px;resize:none;"></textarea>
<br>
<div id="historyBox" style="width:800px;height:200px;margin-left:auto;margin-right:auto;display:block;font-size:20px;border:1px solid #aaaaaa;font-family:monospace;overflow-y:scroll;color:#aaaaaa;"></div>
<script>
	let x;         // 0 is left, 500 is right
	let y;         // 0 is top, 500 is bottom
	let rot;       // 0 is straight up, 360 is full rotation, clockwise
	let ctx;       // the context object
	let penUp;     // true if pen is up (no drawing)
	let commands;  // the array of commands currently being executed

	// place the turtle in the appropriate spot
	function place() {
		$('#t').css({left: parseInt(x-25), top: parseInt(y-25), transform: 'rotate('+parseInt(rot)+'deg)'});
		$('#t2').css({left: parseInt(x-25+(x>250 ? -500: 500)), top: parseInt(y-25), transform: 'rotate('+parseInt(rot)+'deg)'});
		$('#t3').css({left: parseInt(x-25), top: parseInt(y-25+(y>250 ? -500 : 500)), transform: 'rotate('+parseInt(rot)+'deg)'});
		$('#t4').css({left: parseInt(x-25+(x>250 ? -500: 500)), top: parseInt(y-25+(y>250 ? -500 : 500)), transform: 'rotate('+parseInt(rot)+'deg)'});
	}

	// close the stroke, alter x or y, and start stroke again
	function restroke(adjustment) {
		if(penUp) {
			ctx.moveTo(x, y);
		} else {
			ctx.lineTo(x, y);
			ctx.stroke();
		}
		adjustment();
		ctx.moveTo(x, y);
	}

	// rotate the turtle clockwise by rot_add amount (360 is one rotation). negative for counter-clockwise
	function rotate(rot_add) {
		rot += rot_add;
		place();
	}

	// move the turtle by d distance (d=100 is full length). turtle wraps around
	function move(d) {
		ctx.beginPath();
		ctx.moveTo(x, y);
		for(let i=0; i<d*5; ++i) {
			x = x + Math.sin(rot*2*Math.PI/360);
			y = y - Math.cos(rot*2*Math.PI/360);
			if(x>=500) restroke(function() {x-=500;});
			if(y>=500) restroke(function() {y-=500;});
			if(x<0) restroke(function() {x+=500;});
			if(y<0) restroke(function() {y+=500;});
		}
		if(penUp) {
			ctx.moveTo(x, y);
		} else {
			ctx.lineTo(x, y);
			ctx.stroke();
		}
		place();
	}

	// reset the canvas and the turtle
	function reset() {
		ctx.clearRect(0, 0, 500, 500);
		ctx.strokeStyle = 'black';
		x = 250.0;
		y = 250.0;
		rot = 0.0;
		penUp = false;
		place();
	}

	// return true if string `s` is a word (only a-z, A-Z, #)
	function isWord(s) {
		return (s.match(/^[a-zA-Z#]+/) != null);
	}

	// execute the command, i is the current index into `commands` and isLoop is true if we're inside an `r` loop
	// returns the next index to process
	function execute(i, isLoop) {
		while(i < commands.length) {
			if(['lt', 'rt', 'go', 'back'].includes(commands[i])) {
				if (i + 1 >= commands.length) {
					throw i + 1;
				}
				let amount = parseInt(commands[i + 1]);
				if (isNaN(amount)) {
					throw i + 1;
				}
				if(commands[i]=='lt') rotate(-amount);
				if(commands[i]=='rt') rotate(amount);
				if(commands[i]=='go') move(amount);
				if(commands[i]=='back') move(-amount);
				i += 2;
			} else if(commands[i] == 'col') {
				if (i + 1 >= commands.length) {
					throw i + 1;
				}
				if(commands[i+1]=='?') {
					ctx.strokeStyle = 'rgb('+Math.floor(Math.random()*255)+','+Math.floor(Math.random()*255)+','+Math.floor(Math.random()*255)+')';
				}
				else {
					ctx.strokeStyle = commands[i+1];
				}
				i += 2;
			} else if(commands[i] == 'pen') {
				if (i + 1 >= commands.length) {
					throw i + 1;
				}
				if (commands[i + 1] == 'up') {
					penUp = true;
				} else if (commands[i + 1] == 'down') {
					penUp = false;
				} else {
					throw i + 1;
				}
				i += 2;
			} else if(commands[i] == 'r') {
				if (i + 1 >= commands.length) {
					throw i + 1;
				}
				let amount = parseInt(commands[i + 1]);
				if (isNaN(amount) || amount==0) {
					throw i + 1;
				}
				if (i + 2 >= commands.length || commands[i+2] != '[') {
					throw i + 2;
				}
				let nextIndex;
				for(let count = 0; count < amount; ++count) {
					nextIndex = execute(i+3, true);
				}
				i = nextIndex;
			} else if(commands[i] == 'c') {
				reset();
				i += 1;
			} else if(commands[i] == ']') {
				if(!isLoop) {
					throw i;
				}
				return i+1;
			} else {
				throw i;
			}
		}
		if(isLoop) {
			throw i;
		}
		return i;
	}

	// get the next token and an index for when to look afterwards (or null if we're at the end of the string)
	function getToken(input, indexFrom) {
		let match;
		let inputSubstring = input.substr(indexFrom);
		if(inputSubstring == '') {
			return null;
		}
		// words, or numbers (including a negative sign)
		match = inputSubstring.match(/^([a-zA-Z]+|[0-9-]+)\s*/);
		if(!match) {
			// hex color definition e.g. #f0a
			match = inputSubstring.match(/^(#[0-9a-f][0-9a-f][0-9a-f])\s*/);
		}
		if(!match) {
			// if not the above, then return the first character (and skip whitespace)
			match = inputSubstring.match(/(.)\s*/);
		}
		return {token: match[1], nextIndex: indexFrom + match[0].length}
	}

	// fill the command box will a given command and turn on focus
	function fill(command) {
		$('#commandBox').val(command);
		$('#commandBox').focus();
	}

	// user submits a command to the turtle
	function submit() {
		let input = $('#commandBox').val().replace('\n', ' ').trim();
		let tokenInfo;
		let i = 0;
		commands = [];
		while(tokenInfo = getToken(input, i)) {
			commands.push(tokenInfo.token);
			i = tokenInfo.nextIndex;
		}
		try {
			execute(0, false);
			$('#historyBox').html('<button style=\'margin-left:5px\' onclick=\'fill("' + commands.join(' ') + '")\'>copy</button> ' + commands.join(' ') + '<br>' + $('#historyBox').html());
		} catch(errorIndex) {
			let originalCommands = [...commands];
			if(errorIndex >= commands.length) {
				commands.push('???');
			}
			$('#historyBox').html('<button style=\'margin-left:5px\' onclick=\'fill("' + originalCommands.join(' ') + '")\'>copy</button> ' + commands.slice(0, errorIndex).join(' ') + ' <span style="color: red">' + commands.slice(errorIndex).join(' ') + '</span><br>' + $('#historyBox').html());
		}
	}

	$('document').ready(function(){
		ctx = $('#c')[0].getContext("2d");
		reset();
		$('#commandBox')[0].addEventListener('keydown', function(event) {
			if (event.code == 'Enter') {
				submit();
			}
		});
		$('#commandBox')[0].addEventListener('keyup', function(event) {
			if (event.code == 'Enter') {
				$('#commandBox').val('');
			}
		});
		$('#commandBox').focus();
	});
</script>
</body>
</html>
